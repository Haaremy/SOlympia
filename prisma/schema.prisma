generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client"

}

datasource db {
  provider = "sqlite"
  url      =  env("DATABASE_URL")
}

model Game {
  id        Int        @id @default(autoincrement())
  url       String
  tagged    String?     
  languages Language[]  // Viele-Sprachen-Beziehung
  points    Points[]    // Umkehrbeziehung zu Points
  entries   Entries[]
  

}

model Language {
  id                Int    @id @default(autoincrement())
  game              Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId            Int
  language          String
  title             String
  story             String
  station           String  // Location-Feld hinzuf端gen
  capacity          String  // Capacity-Feld hinzuf端gen
  descriptionGame   String  // Beschreibung des Spiels hinzuf端gen
  descriptionPoints String  // Beschreibung der Punkte hinzuf端gen
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  password     String
  name         String
  role         Role       @default(USER)
  pointsTotal  Float
  points       Points[]  // Beziehung zu Points (umkehrbare Beziehung)
  entries   Entries[]
  language     String @default("de")
}

enum Role{
  USER
  ADMIN
}

model Points {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      Int
  value       Int
  slot        Int
  lastUpdated DateTime  @default(now())  // Store the timestamp of the last update (when points are submitted or updated)
}

model Entries {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      Int
  value       Int
  slot        Int
  lastUpdated DateTime  @default(now())  // Store the timestamp of the last update (when points are submitted or updated)
}


model GameSettings {
  id      Int       @id @default(autoincrement())
  started Boolean   @default(false) // Whether the timer has started
  ending  DateTime // When the game ends
}
